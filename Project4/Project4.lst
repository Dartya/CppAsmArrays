Microsoft (R) Macro Assembler Version 14.13.26131.1	    05/04/18 15:50:16
AsmSource.asm						     Page 1 - 1


				.686 ; Директива .686 указывает компилятору ассемблера, что необходимо использовать набор операций процессора определённого поколения.
				.MODEL FLAT, C ; Инициализирует модель памяти программы.
				; Синтаксис: .MODEL memorymodel [[, langtype]] [[, stackoption]]  
				; memorymodel Обязательный параметр, который определяет размер указателей кода и данных. В архитек-туре Win32 используется только одна модель памяти – FLAT
				; langtype Необязательный параметр, который задает соглашения именования и вызова процедур и откры-тые символы. В данном примере используются C
				.STACK ; При использовании с .MODEL указывает сегмент стека (со СТЕКОМ имя сегментом). Необязатель-ный параметр size указывает число байтов для стека (по умолчанию 1.024).

				;Директивы .data, .data?, .const и .code определяют то, что называется секциями. В Win32 нет сегментов, но адресное пространство можно поделить на логические секции. Начало одной секции отмечает конец предыдущей. Есть две группы секций: данных и кода.
				;Секция .data содержит инициализированные данные программы.
				;Секция .data? содержит неинициализированные данные программы. Иногда нужно только предварительно выделить некоторое количество памяти, не инициализируя её. Эта секция для этого и предназначается. Преимущество неинициализированных данных в том, что они не занимают места в исполняемом файле. Вы всего лишь сообщаете компилятору, сколько места вам понадобится, ко-гда программа загрузится в па-мять.
				;Секция .const содержит объявления констант, используемых программой. Константы не могут быть изме-нены. Попытка изменить константу вызывает аварийное завершение программы.
				;Задействовать все три секции не обязательно.

 00000000			.DATA	; секция данных
 00000000 DD EB E5 EC E5		helloFormat BYTE "Элемент № %d: %d", 10, 13, 13, 0; шаблонная строка
	   ED F2 20 B9 20
	   25 64 3A 20 25
	   64 0A 0D 0D 00
 00000014 00000008			mas dd 8d, 23d, -10d, 3d, 4d, -7d, 43d, 56d, 2d, 3d, 45d, 67d, 10d, -5d, -23d ; массив
	   00000017
	   FFFFFFF6
	   00000003
	   00000004
	   FFFFFFF9
	   0000002B
	   00000038
	   00000002
	   00000003
	   0000002D
	   00000043
	   0000000A
	   FFFFFFFB
	   FFFFFFE9
 00000050 0000000F			n dd 15d	; количество элементов массива mas, далее будет использована как счетчик
 00000054 00000000			sch dd 0	; для сохранения значения счетчика
 00000058 00000000			adr dd 0	; для сохранения индекса массива
 0000005C 00000000			num dd 0	; для нумерации элементов массива, удовлетворяющих условию задачи

 00000000			.CODE ; секция кода
				EXTRN  printf : proc ; определение внешней функции вывода форматированной строки

 00000000			printMas PROC  ; определение процедуры printMas
					; ПОДГОТОВКА ЦИКЛА
 00000000  8D 15 00000014 R		lea edx, mas		; установка регистра данных - загрузка массива
 00000006  8D 1D 00000000 R		lea ebx, helloFormat; загрузка в регистры базы подготовленной строки
 0000000C  B8 00000000			mov eax, 0			; обнуление аккумулятора

 00000011			L:  ; НАЧАЛО ЦИКЛА
 00000011  8B 02			mov eax, [edx]	; перемещаем очередной элемент в аккумулятор
 00000013  89 15 00000058 R		mov adr, edx	; сохраняем из базы индекс массива в переменной adr

					; БЛОК СРАВНЕНИЯ очередного элемента массива
 00000019  83 F8 0A			cmp eax, 10d	; сравниваем значение в аккумуляторе с 10
 0000001C  7D 35			jge L1			; если op1 > op2 - переход по метке
 0000001E  83 F8 F6			cmp eax, -10d	; сравниваем значение в аккумуляторе с -10
 00000021  7E 30			jle L1			; если op1 < op2 - переход по метке
					
					; далее выполняется случай TRUE - печать
 00000023  FF 05 0000005C R		inc num			; инкрементируем переменную элементов массива, удовлетворяющих условию задачи
 00000029  50				push eax		; заносим аккумулятор в стек
 0000002A  FF 35 0000005C R		push num		; заносим перемунную num в стек
 00000030  53				push ebx		; заносим базу со строкой в стек
 00000031  E8 00000000 E		call printf		; вызов функции C++ печати форматированной строки 
 00000036  83 C4 0C			add esp, 12		; освобождаем стек (4 байта * (2 регистра + 1 переменная DD) = 12 байт)

					; БЛОК ПОДГОТОВКИ НОВОЙ ИТЕРАЦИИ ЦИКЛА (установка значений аккумулятора, адреса и счетчика)
					
 00000039  B8 00000000			mov eax, 0		; обнуление аккумулятора
 0000003E  83 05 00000058 R		add adr, 4		; инкрементируем индекс массива (+4 байта)
	   04
 00000045  8B 15 00000058 R		mov edx, adr	; установка регистра данных - загрузка последнего адреса массива
 0000004B  FF 0D 00000050 R		dec n			; декрементируем значение счетчика
 00000051  EB 0B			jmp L2			; переход в блок проверки окончания цикла

 00000053			L1: ; действия в случае результата FALSE в блоке сравнения
					
 00000053  83 C2 04			add edx, 4		; инкрементируем индекс массива
 00000056  FF 0D 00000050 R		dec n			; декрементируем значение счетчика
 0000005C  EB 00			jmp L2			; переход в блок проверки окончания цикла

 0000005E			L2: ; БЛОК ПРОВЕРКИ ОКОНЧАНИЯ ЦИКЛА
 0000005E  83 3D 00000050 R		cmp n, 0		; сравнение счетчика с нулем
	   00
 00000065  75 AA			jne L			; если не равно - переход на начало цикла

 00000067  C3			ret					; выход из процедуры

 00000068			printMas ENDP		; блок окончания процедуры

				END
Microsoft (R) Macro Assembler Version 14.13.26131.1	    05/04/18 15:50:16
AsmSource.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00000400 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000060 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000068 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

printMas . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000068 Public C
  L  . . . . . . . . . . . . . .	L Near	 00000011 _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 00000053 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 0000005E _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000001h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
adr  . . . . . . . . . . . . . .	DWord	 00000058 _DATA	
helloFormat  . . . . . . . . . .	Byte	 00000000 _DATA	
mas  . . . . . . . . . . . . . .	DWord	 00000014 _DATA	
num  . . . . . . . . . . . . . .	DWord	 0000005C _DATA	
n  . . . . . . . . . . . . . . .	DWord	 00000050 _DATA	
printf . . . . . . . . . . . . .	L Near	 00000000 FLAT	External C
sch  . . . . . . . . . . . . . .	DWord	 00000054 _DATA	

	   0 Warnings
	   0 Errors
